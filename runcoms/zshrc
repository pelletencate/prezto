#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

###########
# Aliases #
###########
alias ea='e ~/.zprezto/runcoms && source ~/.zshrc'

alias a2c='aria2c -x10 -s10 -k1M'

alias mt='multitail -cT ansi'

alias cup="brew update && brew upgrade && for app in \$(brew cask list); do cver=\"\$(brew cask info \"\${app}\" | head -n 1 | cut -d \" \" -f 2)\"; ivers=\$(ls -1 \"/usr/local/Caskroom/\${app}/.metadata/\" | tr '\n' ' ' | sed -e 's/ \$//'); aivers=(\${ivers}); nvers=\$(echo \${#aivers[@]}); echo \"* \${app}: \${ivers} -> \${cver}\"; if [[ \${nvers} -eq 1 ]]; then echo \"\${ivers}\" | grep -q \"^\${cver}\$\" && { continue; }; fi; brew cask uninstall \"\${app}\" --force; brew cask install \"\${app}\"; done"

# Docker-machine
alias dm='docker-machine start dev && eval $(docker-machine env dev)'

# Git
alias gu='git up'

# Heroku
alias hpa='hp addons:open'
alias hpc='hp run rails c'

# Occasion
alias oc='~/dev/occasion'

# Zeus
alias kz='pkill -term sidekiq; pkill -kill zeus; pkill -kill fsevents-wrapper; rm -f .zeus.sock'

#############
# Functions #
#############

# HEROKU SHORTCUTS #
#------------------#
hp() { heroku $* -r production }
hs() { heroku $* -r staging }

# ZEUS STARTER #
#--------------#
z() {
  oc
	if (( $# == 0 )) then
		while; do
			clear
			[ -e .zeus.dead ] || zeus start
			sleep 1 || break
		done
	else
		zeus $*
		stty sane
	fi
}

zq() {
	while; do
		[ -e .zeus.dead ] || z q
		stty sane
		sleep 2 || break
	done
}

zs() {
	while; do
		[ -e .zeus.dead ] || z s
		stty sane
		sleep 2 || break
	done
}

hf() {
  git diff --exit-code > /dev/null && working=clean || working=dirty
  git diff --cached --exit-code > /dev/null && staged=clean || staged=dirty

  [ $staged = 'dirty' -a $working = 'dirty' ] && gs -k -u -q
  [ $staged = 'dirty' -o $working = 'dirty' ] && gs -q

  gco master
  gup
  git flow hotfix start "$(($(git tag | ag \^v\\d+$ | sort | tail -n 1 | cut -d v -f 2) + 1))"

  [ $staged = 'dirty' ] && gsp && giu
  [ $working = 'dirty' ] && gsp
}

chf() {
  gsw
  gup
  hotfix_branch=$(git branch | ag 'hotfix' | sed -e 's/^[* ]*//g')
  hotfix_number=$(echo $hotfix_branch | sed -e 's/^hotfix\///g')
  gco $hotfix_branch || return 1
  git push || return 1
  hub pull-request -m "Hotfix $hotfix_number" || return 1
  gco master || return 1
  git flow hotfix finish $hotfix_number -m "Hotfix $hotfix_number" || return 1
  echo "And now, we wait..."
  while [ "$(hub ci-status $hotfix_branch)" = "pending" ] || [ "$(hub ci-status $hotfix_branch)" = "no status" ]; do sleep 1; done
  echo "And now, we push..."
  git push --tags origin master
}

gup() {
  startingBranch=$(git rev-parse --abbrev-ref HEAD)

  git diff --exit-code > /dev/null && working=clean || working=dirty
  git diff --cached --exit-code > /dev/null && staged=clean || staged=dirty

  [ $staged = 'dirty' -a $working = 'dirty' ] && gs -k -u -q
  [ $staged = 'dirty' -o $working = 'dirty' ] && gs -q

  gf --tags

  for branch in $(git for-each-ref --format="%(refname:short) %(push:track)" refs/heads | ag '\]$' | cut -d ' ' -f 1); do
    git checkout -q $branch || return 1
    git pull -q || return 1
  done

  git branch --merged develop | ag -v '^(\*|[* ]*(develop|master)$)' | sed -e 's/^[* ]*//g' | xargs git branch -q -d || return 1

  gco -q $startingBranch

  [ $staged = 'dirty' ] && gsp && giu
  [ $working = 'dirty' ] && gsp
  true
}

# FEATURE STARTER #
#-----------------#

f() {
  feature_number=$(trim $*)
  [ -z $feature_number ] && echo 'Usage: f <feature_number>' && return

  git diff --exit-code > /dev/null && working=clean || working=dirty
  git diff --cached --exit-code > /dev/null && staged=clean || staged=dirty

  [ $staged = 'dirty' -a $working = 'dirty' ] && gs -k -u -q
  [ $staged = 'dirty' -o $working = 'dirty' ] && gs -q

  gup

  count="$(gb | sed -e 's/[* ] //g' | grep -c "^feature/$feature_number")"
  if [ $count -ne "1" ]; then
    if [ $count -eq "0" ]; then
      # No local branch found. Search remote tracking branches
      count="$(gb -r | grep '^[* ] origin' | sed -e 's/[* ] origin\///g' | grep -c "^feature/$feature_number")"
      if [ $count -ne "1" ]; then
        if [ $count -eq "0" ]; then
          # No remote branch found. Create new branch
           branch_name=$(hub issue -f $'%I %t\n' | grep "^$feature_number " | sed -e 's/[^a-z0-9-]/_/gi' -e 's/[^A-Z]\([A-Z]\)/_\L\1/g' -e 's/\([A-Z]\)/\L\1/g' -e 's/__*/_/g' -e 's/^_//' -e 's/_$//g')
          if [ $(echo $branch_name | wc -l) -eq 1 ]; then
            gco -b "feature/$branch_name" develop
          else
            echo "Feature $feature_number not found on Github"
            return
          fi
        else
          echo "Multiple remote branches for feature $feature_number"
          return
        fi
      else
        F_BRANCH=$(gb -r | grep '^[* ] origin' | sed -e 's/[* ] origin\///g' | grep "^feature/$feature_number")
      fi
    else
      echo "Multiple local branches for feature $feature_number"
      return
    fi
  else
    F_BRANCH=$(gb | sed -e 's/[* ] //g' | grep "^feature/.*$feature_number")
  fi

  # Check out branch
  gco $F_BRANCH &&
  bundle install | grep -v '^Us'
  dbs

  [ $staged = 'dirty' ] && gsp && giu
  [ $working = 'dirty' ] && gsp
}

sz() {
  if [ ! -e .zeus.dead ]; then
    touch .zeus.dead
    kz
  fi
}

dbs() {
  if psql -tl | cut -d \| -f 1 | grep -wq 'occsn_dump'; then
    # Dump exists.
    if psql -tl | cut -d \| -f 1 | grep -wq 'occsn'; then
      # Dev exist?
      latest=$(trim $(psql -tc 'SELECT MAX(version) FROM schema_migrations' occsn_dump))
      db_migrations=$(for i in $(psql -tc "SELECT * from schema_migrations WHERE CAST(version AS BIGINT) > $latest" occsn); do echo "$(trim $i)"; done | sort)
      fs_migrations=$(for i in $(ls db/migrate | cut -d '_' -f 1 | awk "\$1 > $latest"); do echo "$(trim $i)"; done | sort)

      if [ ! -z "$(comm <(echo $db_migrations) <(echo $fs_migrations) -23)" ]; then
        # Database has migrations not in the FS. Reset db
        dbr
      elif [ ! -z "$(comm <(echo $db_migrations) <(echo $fs_migrations) -13)" ]; then
        # FS has migrations not in db. Run db:migrate
        dbm
      fi
    else
      # Dev doesn't exist, create it
      dbr
    fi
 else
    # Dump doesn't exist, fetch it
  	dbu
  fi
}

# Recreate and migrate database
dbr() {
  sz
  # Create and migrate new database, and recreate test databases.
  dropdb --if-exists occsn
  createdb -T occsn_dump occsn
  dbm
  rake db:seed patch_operators_hosts after_party:run
  rm -f .zeus.dead
}

dbm() {
  rm -f db/schema.rb
  if [ -z $(pgrep prerake) ]; then
    rake db:migrate
  else
    z r db:migrate
  fi
}

dbt() {
  if psql -tl | cut -d \| -f 1 | grep -wq 'occsn_test'; then
    latest=$(trim $(psql -tc 'SELECT MAX(version) FROM schema_migrations' occsn_dump))
    db_migrations=$(for i in $(psql -tc "SELECT * from schema_migrations WHERE CAST(version AS BIGINT) > $latest" occsn_test); do echo "$(trim $i)"; done | sort)
    fs_migrations=$(for i in $(ls db/migrate | cut -d '_' -f 1 | awk "\$1 > $latest"); do echo "$(trim $i)"; done | sort)

    if [ ! -z "$(comm <(echo $db_migrations) <(echo $fs_migrations) -23)" ]; then
      # Database has migrations not in the FS. Reset db
      dbtr
    elif [ ! -z "$(comm <(echo $db_migrations) <(echo $fs_migrations) -13)" ]; then
      # FS has migrations not in db. Run db:migrate
      dbtm
    fi
  else
    dbtr
  fi
}

dbtr() {
  sz
  rake parallel:drop parallel:create parallel:load_schema
  rm -f .zeus.dead
}

dbtm() {
  if [ -z $(pgrep prerake) ]; then
    z r parallel:migrate
    kz
  else
    rake parallel:migrate
    rm -f .zeus.dead
  fi
}

# Drops all feature databases and reloads Occasion database
dbu() {
  sz
  dropdb --if-exists occsn > /dev/null &&
  dropdb --if-exists occsn_dump > /dev/null && createdb occsn_dump && \
  aria2c -s10 -x10 -k1M -d /tmp -o dump $(heroku pg:backups:public-url -r production) && \
  pg_restore /tmp/dump --no-acl --no-owner -d occsn_dump -j 8 && \
  rm -f /tmp/dump &&
  dbr
}

trim() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"   # remove leading whitespace characters
    var="${var%"${var##*[![:space:]]}"}"   # remove trailing whitespace characters
    echo -n "$var"
}

export NVM_DIR="$HOME/.nvm"
. "/usr/local/opt/nvm/nvm.sh"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
